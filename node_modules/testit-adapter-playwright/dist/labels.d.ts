/// <reference types="node" />
import { Link, Label, Attachment } from "testit-js-commons";
export interface MetadataMessage {
    workItemIds?: string[];
    displayName?: string;
    externalId?: string;
    title?: string;
    description?: string;
    labels?: Label[];
    links?: Link[];
    namespace?: string;
    classname?: string;
    addLinks?: Link[];
    addAttachments?: Attachment[];
    addMessage?: string;
    params?: Parameters;
}
interface AttachmentOptions {
    contentType: ContentType | string;
    fileExtension?: string;
}
declare enum ContentType {
    TEXT = "text/plain",
    XML = "application/xml",
    HTML = "text/html",
    CSV = "text/csv",
    TSV = "text/tab-separated-values",
    CSS = "text/css",
    URI = "text/uri-list",
    SVG = "image/svg+xml",
    PNG = "image/png",
    JSON = "application/json",
    ZIP = "application/zip",
    WEBM = "video/webm",
    JPEG = "image/jpeg",
    MP4 = "video/mp4"
}
type Parameters = Record<string, string>;
export declare class testit {
    private static addMetadataAttachment;
    static addAttachment(name: string, content: Buffer | string, options: ContentType | string | Pick<AttachmentOptions, "contentType">): Promise<void>;
    private static mapParams;
    static workItemIds(value: string[]): Promise<void>;
    static displayName(value: string): Promise<void>;
    static externalId(value: string): Promise<void>;
    static title(value: string): Promise<void>;
    static description(value: string): Promise<void>;
    static labels(value: string[]): Promise<void>;
    static links(value: Link[]): Promise<void>;
    static namespace(value: string): Promise<void>;
    static classname(value: string): Promise<void>;
    static addLinks(value: Link[]): Promise<void>;
    static addMessage(value: string): Promise<void>;
    static params(value: any): Promise<void>;
    static step<T>(name: string, body: () => Promise<T>): Promise<T>;
}
export {};
