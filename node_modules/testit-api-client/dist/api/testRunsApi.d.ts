/// <reference types="node" />
import http from 'http';
import { AutoTestResultsForTestRunModel } from '../model/autoTestResultsForTestRunModel';
import { TestPointResultModel } from '../model/testPointResultModel';
import { TestResultsLocalFilterModel } from '../model/testResultsLocalFilterModel';
import { TestResultsStatisticsGetModel } from '../model/testResultsStatisticsGetModel';
import { TestRunFillByAutoTestsPostModel } from '../model/testRunFillByAutoTestsPostModel';
import { TestRunFillByConfigurationsPostModel } from '../model/testRunFillByConfigurationsPostModel';
import { TestRunFillByWorkItemsPostModel } from '../model/testRunFillByWorkItemsPostModel';
import { TestRunFilterModel } from '../model/testRunFilterModel';
import { TestRunSelectModel } from '../model/testRunSelectModel';
import { TestRunShortGetModel } from '../model/testRunShortGetModel';
import { TestRunTestResultsPartialBulkSetModel } from '../model/testRunTestResultsPartialBulkSetModel';
import { TestRunUpdateMultipleModel } from '../model/testRunUpdateMultipleModel';
import { TestRunV2GetModel } from '../model/testRunV2GetModel';
import { TestRunV2PostShortModel } from '../model/testRunV2PostShortModel';
import { TestRunV2PutModel } from '../model/testRunV2PutModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum TestRunsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class TestRunsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TestRunsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2TestRunsDelete(testRunSelectModel?: TestRunSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2TestRunsIdDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestRunsIdPurgePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestRunsIdRestorePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestRunsIdStatisticsFilterPost(id: string, testResultsLocalFilterModel?: TestResultsLocalFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestResultsStatisticsGetModel;
    }>;
    apiV2TestRunsIdTestPointsResultsGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPointResultModel>;
    }>;
    apiV2TestRunsIdTestResultsBulkPut(id: string, testRunTestResultsPartialBulkSetModel?: TestRunTestResultsPartialBulkSetModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestRunsIdTestResultsLastModifiedModificationDateGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Date;
    }>;
    apiV2TestRunsPurgeBulkPost(testRunSelectModel?: TestRunSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2TestRunsRestoreBulkPost(testRunSelectModel?: TestRunSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2TestRunsSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, testRunFilterModel?: TestRunFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestRunShortGetModel>;
    }>;
    apiV2TestRunsUpdateMultiplePost(testRunUpdateMultipleModel?: TestRunUpdateMultipleModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    completeTestRun(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    createAndFillByAutoTests(testRunFillByAutoTestsPostModel?: TestRunFillByAutoTestsPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestRunV2GetModel;
    }>;
    createAndFillByConfigurations(testRunFillByConfigurationsPostModel?: TestRunFillByConfigurationsPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestRunV2GetModel;
    }>;
    createAndFillByWorkItems(testRunFillByWorkItemsPostModel?: TestRunFillByWorkItemsPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestRunV2GetModel;
    }>;
    createEmpty(testRunV2PostShortModel?: TestRunV2PostShortModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestRunV2GetModel;
    }>;
    getTestRunById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestRunV2GetModel;
    }>;
    setAutoTestResultsForTestRun(id: string, autoTestResultsForTestRunModel?: Array<AutoTestResultsForTestRunModel>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    startTestRun(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    stopTestRun(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    updateEmpty(testRunV2PutModel?: TestRunV2PutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
