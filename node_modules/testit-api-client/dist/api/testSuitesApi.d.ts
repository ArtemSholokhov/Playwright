/// <reference types="node" />
import http from 'http';
import { ConfigurationModel } from '../model/configurationModel';
import { Operation } from '../model/operation';
import { TestPointByTestSuiteModel } from '../model/testPointByTestSuiteModel';
import { TestResultV2ShortModel } from '../model/testResultV2ShortModel';
import { TestSuiteV2GetModel } from '../model/testSuiteV2GetModel';
import { TestSuiteV2PostModel } from '../model/testSuiteV2PostModel';
import { TestSuiteV2PutModel } from '../model/testSuiteV2PutModel';
import { TestSuiteWorkItemsSearchModel } from '../model/testSuiteWorkItemsSearchModel';
import { WorkItemSelectModel } from '../model/workItemSelectModel';
import { WorkItemShortModel } from '../model/workItemShortModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum TestSuitesApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class TestSuitesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TestSuitesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    addTestPointsToTestSuite(id: string, workItemSelectModel?: WorkItemSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestSuitesIdPatch(id: string, operation?: Array<Operation>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestSuitesIdRefreshPost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestSuitesIdWorkItemsPost(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestSuitesPost(testSuiteV2PostModel?: TestSuiteV2PostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestSuiteV2GetModel;
    }>;
    apiV2TestSuitesPut(testSuiteV2PutModel?: TestSuiteV2PutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteTestSuite(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getConfigurationsByTestSuiteId(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConfigurationModel>;
    }>;
    getTestPointsById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPointByTestSuiteModel>;
    }>;
    getTestResultsById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestResultV2ShortModel>;
    }>;
    getTestSuiteById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestSuiteV2GetModel;
    }>;
    searchWorkItems(id: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, testSuiteWorkItemsSearchModel?: TestSuiteWorkItemsSearchModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemShortModel>;
    }>;
    setConfigurationsByTestSuiteId(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
