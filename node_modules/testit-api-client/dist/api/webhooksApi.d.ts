/// <reference types="node" />
import http from 'http';
import { SearchWebhooksQueryModel } from '../model/searchWebhooksQueryModel';
import { WebHookEventType } from '../model/webHookEventType';
import { WebHookModel } from '../model/webHookModel';
import { WebHookPostModel } from '../model/webHookPostModel';
import { WebHookTestModel } from '../model/webHookTestModel';
import { WebhookResponse } from '../model/webhookResponse';
import { WebhookVariablesType } from '../model/webhookVariablesType';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum WebhooksApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class WebhooksApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: WebhooksApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2WebhooksGet(projectId?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WebHookModel>;
    }>;
    apiV2WebhooksIdDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2WebhooksIdGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebHookModel;
    }>;
    apiV2WebhooksIdPut(id: string, webHookPostModel?: WebHookPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebHookModel;
    }>;
    apiV2WebhooksPost(webHookPostModel?: WebHookPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebHookModel;
    }>;
    apiV2WebhooksSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, searchWebhooksQueryModel?: SearchWebhooksQueryModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WebHookModel>;
    }>;
    apiV2WebhooksSpecialVariablesGet(eventType?: WebHookEventType, variablesType?: WebhookVariablesType, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2WebhooksTestPost(webHookTestModel?: WebHookTestModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebhookResponse;
    }>;
}
