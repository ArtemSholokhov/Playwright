/// <reference types="node" />
import http from 'http';
import { CustomAttributeGetModel } from '../model/customAttributeGetModel';
import { CustomAttributeModel } from '../model/customAttributeModel';
import { CustomAttributeTestPlanProjectRelationPutModel } from '../model/customAttributeTestPlanProjectRelationPutModel';
import { ProjectAttributesFilterModel } from '../model/projectAttributesFilterModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ProjectTestPlanAttributesApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class ProjectTestPlanAttributesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectTestPlanAttributesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    createCustomAttributeTestPlanProjectRelations(projectId: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteCustomAttributeTestPlanProjectRelations(projectId: string, attributeId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getCustomAttributeTestPlanProjectRelations(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<CustomAttributeModel>;
    }>;
    searchTestPlanAttributesInProject(projectId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, projectAttributesFilterModel?: ProjectAttributesFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<CustomAttributeGetModel>;
    }>;
    updateCustomAttributeTestPlanProjectRelations(projectId: string, customAttributeTestPlanProjectRelationPutModel?: CustomAttributeTestPlanProjectRelationPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
