/// <reference types="node" />
/// <reference types="node" />
import http from 'http';
import { AttachmentModel } from '../model/attachmentModel';
import { ImageResizeType } from '../model/imageResizeType';
import { TestResultModel } from '../model/testResultModel';
import { TestResultShortGetModel } from '../model/testResultShortGetModel';
import { TestResultUpdateModel } from '../model/testResultUpdateModel';
import { TestResultsFilterModel } from '../model/testResultsFilterModel';
import { TestResultsStatisticsGetModel } from '../model/testResultsStatisticsGetModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
import { RequestFile } from './apis';
export declare enum TestResultsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class TestResultsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TestResultsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2TestResultsIdAggregatedGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestResultModel;
    }>;
    apiV2TestResultsIdAttachmentsAttachmentIdPut(id: string, attachmentId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestResultsIdAttachmentsInfoGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AttachmentModel>;
    }>;
    apiV2TestResultsIdGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestResultModel;
    }>;
    apiV2TestResultsIdPut(id: string, testResultUpdateModel?: TestResultUpdateModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestResultsSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, testResultsFilterModel?: TestResultsFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestResultShortGetModel>;
    }>;
    apiV2TestResultsStatisticsFilterPost(testResultsFilterModel?: TestResultsFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestResultsStatisticsGetModel;
    }>;
    createAttachment(id: string, file?: RequestFile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    deleteAttachment(id: string, attachmentId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    downloadAttachment(attachmentId: string, id: string, width?: number, height?: number, resizeType?: ImageResizeType, backgroundColor?: string, preview?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getAttachment(id: string, attachmentId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AttachmentModel;
    }>;
    getAttachments(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AttachmentModel>;
    }>;
}
