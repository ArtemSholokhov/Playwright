/// <reference types="node" />
import http from 'http';
import { AutoTestAverageDurationModel } from '../model/autoTestAverageDurationModel';
import { AutoTestModel } from '../model/autoTestModel';
import { AutoTestPostModel } from '../model/autoTestPostModel';
import { AutoTestPutModel } from '../model/autoTestPutModel';
import { AutotestHistoricalResultSelectModel } from '../model/autotestHistoricalResultSelectModel';
import { AutotestResultHistoricalGetModel } from '../model/autotestResultHistoricalGetModel';
import { AutotestsSelectModel } from '../model/autotestsSelectModel';
import { FlakyBulkModel } from '../model/flakyBulkModel';
import { Operation } from '../model/operation';
import { TestResultChronologyModel } from '../model/testResultChronologyModel';
import { TestResultHistoryReportModel } from '../model/testResultHistoryReportModel';
import { TestRunShortModel } from '../model/testRunShortModel';
import { WorkItemIdModel } from '../model/workItemIdModel';
import { WorkItemIdentifierModel } from '../model/workItemIdentifierModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum AutoTestsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class AutoTestsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AutoTestsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2AutoTestsFlakyBulkPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, flakyBulkModel?: FlakyBulkModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2AutoTestsIdPatch(id: string, operation?: Array<Operation>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2AutoTestsIdTestResultsSearchPost(id: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, autotestHistoricalResultSelectModel?: AutotestHistoricalResultSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AutotestResultHistoricalGetModel>;
    }>;
    apiV2AutoTestsIdWorkItemsChangedIdGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost(id: string, workItemId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2AutoTestsSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, autotestsSelectModel?: AutotestsSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AutoTestModel>;
    }>;
    createAutoTest(autoTestPostModel?: AutoTestPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AutoTestModel;
    }>;
    createMultiple(autoTestPostModel?: Array<AutoTestPostModel>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AutoTestModel>;
    }>;
    deleteAutoTest(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteAutoTestLinkFromWorkItem(id: string, workItemId?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getAllAutoTests(projectId?: string, externalId?: string, globalId?: number, namespace?: string, isNamespaceNull?: boolean, includeEmptyNamespaces?: boolean, className?: string, isClassnameNull?: boolean, includeEmptyClassNames?: boolean, isDeleted?: boolean, deleted?: boolean, labels?: Array<string>, stabilityMinimal?: number, minStability?: number, stabilityMaximal?: number, maxStability?: number, isFlaky?: boolean, flaky?: boolean, includeSteps?: boolean, includeLabels?: boolean, externalKey?: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AutoTestModel>;
    }>;
    getAutoTestAverageDuration(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AutoTestAverageDurationModel;
    }>;
    getAutoTestById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AutoTestModel;
    }>;
    getAutoTestChronology(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestResultChronologyModel>;
    }>;
    getTestRuns(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestRunShortModel>;
    }>;
    getWorkItemResults(id: string, from?: Date, to?: Date, configurationIds?: Array<string>, testPlanIds?: Array<string>, userIds?: Array<string>, outcomes?: Array<string>, isAutomated?: boolean, automated?: boolean, testRunIds?: Array<string>, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestResultHistoryReportModel>;
    }>;
    getWorkItemsLinkedToAutoTest(id: string, isDeleted?: boolean, isWorkItemDeleted?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemIdentifierModel>;
    }>;
    linkAutoTestToWorkItem(id: string, workItemIdModel?: WorkItemIdModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    updateAutoTest(autoTestPutModel?: AutoTestPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    updateMultiple(autoTestPutModel?: Array<AutoTestPutModel>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
