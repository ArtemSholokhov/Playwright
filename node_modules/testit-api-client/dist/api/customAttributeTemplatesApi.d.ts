/// <reference types="node" />
import http from 'http';
import { CustomAttributeTemplateModel } from '../model/customAttributeTemplateModel';
import { CustomAttributeTemplatePostModel } from '../model/customAttributeTemplatePostModel';
import { CustomAttributeTemplatePutModel } from '../model/customAttributeTemplatePutModel';
import { CustomAttributeTemplateSearchQueryModel } from '../model/customAttributeTemplateSearchQueryModel';
import { NoContentResult } from '../model/noContentResult';
import { SearchCustomAttributeTemplateGetModel } from '../model/searchCustomAttributeTemplateGetModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum CustomAttributeTemplatesApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class CustomAttributeTemplatesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CustomAttributeTemplatesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2CustomAttributesTemplatesIdCustomAttributesExcludePost(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2CustomAttributesTemplatesIdCustomAttributesIncludePost(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2CustomAttributesTemplatesIdDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: NoContentResult;
    }>;
    apiV2CustomAttributesTemplatesIdGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CustomAttributeTemplateModel;
    }>;
    apiV2CustomAttributesTemplatesNameGet(name: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CustomAttributeTemplateModel;
    }>;
    apiV2CustomAttributesTemplatesPost(customAttributeTemplatePostModel?: CustomAttributeTemplatePostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CustomAttributeTemplateModel;
    }>;
    apiV2CustomAttributesTemplatesPut(customAttributeTemplatePutModel?: CustomAttributeTemplatePutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2CustomAttributesTemplatesSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, customAttributeTemplateSearchQueryModel?: CustomAttributeTemplateSearchQueryModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<SearchCustomAttributeTemplateGetModel>;
    }>;
}
