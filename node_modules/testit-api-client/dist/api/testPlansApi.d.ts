/// <reference types="node" />
/// <reference types="node" />
import http from 'http';
import { ConfigurationModel } from '../model/configurationModel';
import { GetXlsxTestPointsByTestPlanModel } from '../model/getXlsxTestPointsByTestPlanModel';
import { Operation } from '../model/operation';
import { TestPlanChangeModel } from '../model/testPlanChangeModel';
import { TestPlanLink } from '../model/testPlanLink';
import { TestPlanModel } from '../model/testPlanModel';
import { TestPlanPostModel } from '../model/testPlanPostModel';
import { TestPlanPutModel } from '../model/testPlanPutModel';
import { TestPlanShortModel } from '../model/testPlanShortModel';
import { TestPlanWithTestSuiteTreeModel } from '../model/testPlanWithTestSuiteTreeModel';
import { TestPointAnalyticResult } from '../model/testPointAnalyticResult';
import { TestPointSelectModel } from '../model/testPointSelectModel';
import { TestPointWithLastResultModel } from '../model/testPointWithLastResultModel';
import { TestRunModel } from '../model/testRunModel';
import { TestRunSearchQueryModel } from '../model/testRunSearchQueryModel';
import { TestSuiteV2TreeModel } from '../model/testSuiteV2TreeModel';
import { WorkItemSelectModel } from '../model/workItemSelectModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum TestPlansApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class TestPlansApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TestPlansApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    addTestPointsWithSections(id: string, workItemSelectModel?: WorkItemSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    addWorkItemsWithSections(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestPlansIdAnalyticsGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestPointAnalyticResult;
    }>;
    apiV2TestPlansIdAutobalancePost(id: string, testers?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestPlanWithTestSuiteTreeModel;
    }>;
    apiV2TestPlansIdConfigurationsGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConfigurationModel>;
    }>;
    apiV2TestPlansIdExportTestPointsXlsxPost(id: string, timeZoneOffsetInMinutes?: number, getXlsxTestPointsByTestPlanModel?: GetXlsxTestPointsByTestPlanModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    apiV2TestPlansIdExportTestResultHistoryXlsxPost(id: string, mustReturnOnlyLastTestResult?: boolean, includeSteps?: boolean, includeDeletedTestSuites?: boolean, timeZoneOffsetInMinutes?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    apiV2TestPlansIdHistoryGet(id: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPlanChangeModel>;
    }>;
    apiV2TestPlansIdLinksGet(id: string, skip?: number, take?: number, orderBy?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPlanLink>;
    }>;
    apiV2TestPlansIdPatch(id: string, operation?: Array<Operation>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestPlansIdTestPointsLastResultsGet(id: string, testerId?: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPointWithLastResultModel>;
    }>;
    apiV2TestPlansIdTestPointsResetPost(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestPlansIdTestPointsTesterDelete(id: string, testPointSelectModel?: TestPointSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2TestPlansIdTestPointsTesterUserIdPost(id: string, userId: string, testPointSelectModel?: TestPointSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2TestPlansIdTestRunsGet(id: string, notStarted?: boolean, inProgress?: boolean, stopped?: boolean, completed?: boolean, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestRunModel>;
    }>;
    apiV2TestPlansIdTestRunsSearchPost(id: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, testRunSearchQueryModel?: TestRunSearchQueryModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestRunModel>;
    }>;
    apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Date;
    }>;
    apiV2TestPlansIdUnlockRequestPost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2TestPlansShortsPost(isDeleted?: boolean, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPlanShortModel>;
    }>;
    clone(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestPlanModel;
    }>;
    complete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    createTestPlan(testPlanPostModel?: TestPlanPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestPlanModel;
    }>;
    deleteTestPlan(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getTestPlanById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TestPlanModel;
    }>;
    getTestSuitesById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestSuiteV2TreeModel>;
    }>;
    pause(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    purgeTestPlan(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    restoreTestPlan(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    start(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    updateTestPlan(testPlanPutModel?: TestPlanPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
