/// <reference types="node" />
import http from 'http';
import { AutoTestModel } from '../model/autoTestModel';
import { IterationModel } from '../model/iterationModel';
import { SharedStepReferenceModel } from '../model/sharedStepReferenceModel';
import { SharedStepReferenceSectionModel } from '../model/sharedStepReferenceSectionModel';
import { SharedStepReferenceSectionsQueryFilterModel } from '../model/sharedStepReferenceSectionsQueryFilterModel';
import { SharedStepReferencesQueryFilterModel } from '../model/sharedStepReferencesQueryFilterModel';
import { TestResultChronologyModel } from '../model/testResultChronologyModel';
import { TestResultHistoryReportModel } from '../model/testResultHistoryReportModel';
import { WorkItemChangeModel } from '../model/workItemChangeModel';
import { WorkItemLikeModel } from '../model/workItemLikeModel';
import { WorkItemModel } from '../model/workItemModel';
import { WorkItemMovePostModel } from '../model/workItemMovePostModel';
import { WorkItemPostModel } from '../model/workItemPostModel';
import { WorkItemPutModel } from '../model/workItemPutModel';
import { WorkItemSelectModel } from '../model/workItemSelectModel';
import { WorkItemShortModel } from '../model/workItemShortModel';
import { WorkItemVersionModel } from '../model/workItemVersionModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
import { RequestFile } from './apis';
export declare enum WorkItemsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class WorkItemsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: WorkItemsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2WorkItemsIdAttachmentsPost(id: string, file?: RequestFile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    apiV2WorkItemsIdCheckListTransformToTestCasePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WorkItemModel;
    }>;
    apiV2WorkItemsIdHistoryGet(id: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemChangeModel>;
    }>;
    apiV2WorkItemsIdLikeDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2WorkItemsIdLikePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2WorkItemsIdLikesCountGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2WorkItemsIdLikesGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemLikeModel>;
    }>;
    apiV2WorkItemsIdTestResultsHistoryGet(id: string, from?: Date, to?: Date, configurationIds?: Array<string>, testPlanIds?: Array<string>, userIds?: Array<string>, outcomes?: Array<string>, isAutomated?: boolean, automated?: boolean, testRunIds?: Array<string>, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestResultHistoryReportModel>;
    }>;
    apiV2WorkItemsIdVersionVersionIdActualPost(id: string, versionId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WorkItemModel;
    }>;
    apiV2WorkItemsMovePost(workItemMovePostModel?: WorkItemMovePostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WorkItemShortModel;
    }>;
    apiV2WorkItemsSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, workItemSelectModel?: WorkItemSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemShortModel>;
    }>;
    apiV2WorkItemsSharedStepIdReferencesSectionsPost(sharedStepId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, sharedStepReferenceSectionsQueryFilterModel?: SharedStepReferenceSectionsQueryFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<SharedStepReferenceSectionModel>;
    }>;
    apiV2WorkItemsSharedStepIdReferencesWorkItemsPost(sharedStepId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, sharedStepReferencesQueryFilterModel?: SharedStepReferencesQueryFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<SharedStepReferenceModel>;
    }>;
    apiV2WorkItemsSharedStepsSharedStepIdReferencesGet(sharedStepId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<SharedStepReferenceModel>;
    }>;
    createWorkItem(workItemPostModel?: WorkItemPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WorkItemModel;
    }>;
    deleteAllWorkItemsFromAutoTest(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    deleteWorkItem(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getAutoTestsForWorkItem(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AutoTestModel>;
    }>;
    getIterations(id: string, versionId?: string, versionNumber?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<IterationModel>;
    }>;
    getWorkItemById(id: string, versionId?: string, versionNumber?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WorkItemModel;
    }>;
    getWorkItemChronology(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestResultChronologyModel>;
    }>;
    getWorkItemVersions(id: string, workItemVersionId?: string, versionNumber?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemVersionModel>;
    }>;
    purgeWorkItem(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    restoreWorkItem(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    updateWorkItem(workItemPutModel?: WorkItemPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
