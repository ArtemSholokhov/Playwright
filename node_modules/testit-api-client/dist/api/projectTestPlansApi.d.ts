/// <reference types="node" />
import http from 'http';
import { ProjectTestPlansFilterModel } from '../model/projectTestPlansFilterModel';
import { TestPlanSelectModel } from '../model/testPlanSelectModel';
import { TestPlanWithAnalyticModel } from '../model/testPlanWithAnalyticModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ProjectTestPlansApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class ProjectTestPlansApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectTestPlansApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2ProjectsProjectIdTestPlansAnalyticsGet(projectId: string, isDeleted?: boolean, mustUpdateCache?: boolean, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPlanWithAnalyticModel>;
    }>;
    apiV2ProjectsProjectIdTestPlansDeleteBulkPost(projectId: string, testPlanSelectModel?: TestPlanSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2ProjectsProjectIdTestPlansNameExistsGet(projectId: string, name: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: boolean;
    }>;
    apiV2ProjectsProjectIdTestPlansPurgeBulkPost(projectId: string, testPlanSelectModel?: TestPlanSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsProjectIdTestPlansRestoreBulkPost(projectId: string, testPlanSelectModel?: TestPlanSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsProjectIdTestPlansSearchPost(projectId: string, mustUpdateCache?: boolean, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, projectTestPlansFilterModel?: ProjectTestPlansFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPlanWithAnalyticModel>;
    }>;
}
