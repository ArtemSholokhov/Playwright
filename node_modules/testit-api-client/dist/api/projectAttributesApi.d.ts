/// <reference types="node" />
import http from 'http';
import { CustomAttributeGetModel } from '../model/customAttributeGetModel';
import { CustomAttributeModel } from '../model/customAttributeModel';
import { CustomAttributePostModel } from '../model/customAttributePostModel';
import { CustomAttributePutModel } from '../model/customAttributePutModel';
import { DeletionState } from '../model/deletionState';
import { ProjectAttributesFilterModel } from '../model/projectAttributesFilterModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ProjectAttributesApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class ProjectAttributesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectAttributesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    createProjectsAttribute(projectId: string, customAttributePostModel?: CustomAttributePostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CustomAttributeModel;
    }>;
    deleteProjectsAttribute(projectId: string, attributeId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getAttributeByProjectId(projectId: string, attributeId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CustomAttributeModel;
    }>;
    getAttributesByProjectId(projectId: string, isDeleted?: DeletionState, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<CustomAttributeModel>;
    }>;
    searchAttributesInProject(projectId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, projectAttributesFilterModel?: ProjectAttributesFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<CustomAttributeGetModel>;
    }>;
    updateProjectsAttribute(projectId: string, customAttributePutModel?: CustomAttributePutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
