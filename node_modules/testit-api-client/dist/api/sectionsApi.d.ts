/// <reference types="node" />
import http from 'http';
import { DeletionState } from '../model/deletionState';
import { Operation } from '../model/operation';
import { SectionMoveModel } from '../model/sectionMoveModel';
import { SectionPostModel } from '../model/sectionPostModel';
import { SectionPutModel } from '../model/sectionPutModel';
import { SectionRenameModel } from '../model/sectionRenameModel';
import { SectionWithStepsModel } from '../model/sectionWithStepsModel';
import { WorkItemShortModel } from '../model/workItemShortModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum SectionsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class SectionsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SectionsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2SectionsIdPatch(id: string, operation?: Array<Operation>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    createSection(sectionPostModel?: SectionPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SectionWithStepsModel;
    }>;
    deleteSection(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    getSectionById(id: string, isDeleted?: DeletionState, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SectionWithStepsModel;
    }>;
    getWorkItemsBySectionId(id: string, isDeleted?: boolean, tagNames?: Array<string>, includeIterations?: boolean, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemShortModel>;
    }>;
    move(sectionMoveModel?: SectionMoveModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    rename(sectionRenameModel?: SectionRenameModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    updateSection(sectionPutModel?: SectionPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
