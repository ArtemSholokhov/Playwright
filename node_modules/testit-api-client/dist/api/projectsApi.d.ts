/// <reference types="node" />
/// <reference types="node" />
import http from 'http';
import { AutoTestNamespaceModel } from '../model/autoTestNamespaceModel';
import { CustomAttributeTestPlanProjectRelationPutModel } from '../model/customAttributeTestPlanProjectRelationPutModel';
import { FailureClassModel } from '../model/failureClassModel';
import { FilterModel } from '../model/filterModel';
import { Operation } from '../model/operation';
import { ProjectExportWithTestPlansPostModel } from '../model/projectExportWithTestPlansPostModel';
import { ProjectModel } from '../model/projectModel';
import { ProjectPostModel } from '../model/projectPostModel';
import { ProjectPutModel } from '../model/projectPutModel';
import { ProjectSelectModel } from '../model/projectSelectModel';
import { ProjectsFilterModel } from '../model/projectsFilterModel';
import { PublicTestRunModel } from '../model/publicTestRunModel';
import { TestPlanModel } from '../model/testPlanModel';
import { TestRunModel } from '../model/testRunModel';
import { TestRunV2GetModel } from '../model/testRunV2GetModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
import { RequestFile } from './apis';
export declare enum ProjectsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class ProjectsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    _import(includeAttachments?: boolean, file?: RequestFile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    addGlobaAttributesToProject(id: string, requestBody?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsDemoPost(projectPostModel?: ProjectPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProjectModel;
    }>;
    apiV2ProjectsIdDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdFailureClassesGet(id: string, isDeleted?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<FailureClassModel>;
    }>;
    apiV2ProjectsIdFavoritePut(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdFiltersGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<FilterModel>;
    }>;
    apiV2ProjectsIdPatch(id: string, operation?: Array<Operation>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdPurgePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdRestorePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdTestPlansAttributeAttributeIdDelete(id: string, attributeId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdTestPlansAttributePut(id: string, customAttributeTestPlanProjectRelationPutModel?: CustomAttributeTestPlanProjectRelationPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ProjectsIdTestRunsActiveGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<PublicTestRunModel>;
    }>;
    apiV2ProjectsIdTestRunsFullGet(id: string, includeTestResults?: boolean, mustAggregateTestResults?: boolean, notStarted?: boolean, inProgress?: boolean, stopped?: boolean, completed?: boolean, createdDateFrom?: Date, createdDateTo?: Date, testPlanId?: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestRunModel>;
    }>;
    apiV2ProjectsNameNameExistsGet(name: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: boolean;
    }>;
    apiV2ProjectsPurgeBulkPost(projectSelectModel?: ProjectSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2ProjectsRestoreBulkPost(projectSelectModel?: ProjectSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2ProjectsSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, projectsFilterModel?: ProjectsFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ProjectModel>;
    }>;
    backgroundImportProject(file?: RequestFile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    backgroundImportZipProject(file?: RequestFile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    createProject(projectPostModel?: ProjectPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProjectModel;
    }>;
    deleteProjectAutoTests(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    exportWithTestPlansAndConfigurations(id: string, includeAttachments?: boolean, projectExportWithTestPlansPostModel?: ProjectExportWithTestPlansPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Buffer;
    }>;
    getAllProjects(isDeleted?: boolean, projectName?: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ProjectModel>;
    }>;
    getAutoTestsNamespaces(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AutoTestNamespaceModel>;
    }>;
    getProjectById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProjectModel;
    }>;
    getTestPlansByProjectId(id: string, isDeleted?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestPlanModel>;
    }>;
    getTestRunsByProjectId(id: string, notStarted?: boolean, inProgress?: boolean, stopped?: boolean, completed?: boolean, createdDateFrom?: Date, createdDateTo?: Date, testPlanId?: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TestRunV2GetModel>;
    }>;
    updateProject(projectPutModel?: ProjectPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
