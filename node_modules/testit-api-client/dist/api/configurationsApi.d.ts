/// <reference types="node" />
import http from 'http';
import { ConfigurationByParametersModel } from '../model/configurationByParametersModel';
import { ConfigurationFilterModel } from '../model/configurationFilterModel';
import { ConfigurationModel } from '../model/configurationModel';
import { ConfigurationPostModel } from '../model/configurationPostModel';
import { ConfigurationPutModel } from '../model/configurationPutModel';
import { ConfigurationSelectModel } from '../model/configurationSelectModel';
import { Operation } from '../model/operation';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ConfigurationsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class ConfigurationsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ConfigurationsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2ConfigurationsCreateByParametersPost(configurationByParametersModel?: ConfigurationByParametersModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2ConfigurationsDeleteBulkPost(configurationSelectModel?: ConfigurationSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2ConfigurationsIdDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ConfigurationsIdPatch(id: string, operation?: Array<Operation>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ConfigurationsIdPurgePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ConfigurationsIdRestorePost(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ConfigurationsPurgeBulkPost(configurationSelectModel?: ConfigurationSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ConfigurationsPut(configurationPutModel?: ConfigurationPutModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    apiV2ConfigurationsRestoreBulkPost(configurationSelectModel?: ConfigurationSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    apiV2ConfigurationsSearchPost(skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, configurationFilterModel?: ConfigurationFilterModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConfigurationModel>;
    }>;
    createConfiguration(configurationPostModel?: ConfigurationPostModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConfigurationModel;
    }>;
    getConfigurationById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConfigurationModel;
    }>;
}
