/// <reference types="node" />
import http from 'http';
import { TagShortModel } from '../model/tagShortModel';
import { WorkItemGroupGetModel } from '../model/workItemGroupGetModel';
import { WorkItemGroupModel } from '../model/workItemGroupModel';
import { WorkItemSelectModel } from '../model/workItemSelectModel';
import { WorkItemShortModel } from '../model/workItemShortModel';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ProjectWorkItemsApiApiKeys {
    'Bearer or PrivateToken' = 0
}
export declare class ProjectWorkItemsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        'Bearer or PrivateToken': ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectWorkItemsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    apiV2ProjectsProjectIdWorkItemsSearchGroupedPost(projectId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, workItemGroupGetModel?: WorkItemGroupGetModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemGroupModel>;
    }>;
    apiV2ProjectsProjectIdWorkItemsSearchIdPost(projectId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, workItemSelectModel?: WorkItemSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<string>;
    }>;
    apiV2ProjectsProjectIdWorkItemsSearchPost(projectId: string, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, workItemSelectModel?: WorkItemSelectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemShortModel>;
    }>;
    apiV2ProjectsProjectIdWorkItemsTagsGet(projectId: string, isDeleted?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TagShortModel>;
    }>;
    getWorkItemsByProjectId(projectId: string, isDeleted?: boolean, tagNames?: Array<string>, includeIterations?: boolean, skip?: number, take?: number, orderBy?: string, searchField?: string, searchValue?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<WorkItemShortModel>;
    }>;
}
