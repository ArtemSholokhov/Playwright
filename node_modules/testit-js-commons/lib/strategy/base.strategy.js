"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseStrategy = void 0;
class BaseStrategy {
    constructor(client, config) {
        this.client = client;
        this.config = config;
        this.testRunId = Promise.resolve(config.testRunId);
    }
    setup() {
        return __awaiter(this, void 0, void 0, function* () {
            const testRunId = yield this.testRunId;
            yield this.client.testRuns.startTestRun(testRunId);
        });
    }
    teardown() {
        return __awaiter(this, void 0, void 0, function* () {
            const testRunId = yield this.testRunId;
            yield this.client.testRuns.completeTestRun(testRunId);
        });
    }
    loadAutotest(autotest, isPassed) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.autoTests.loadAutotest(autotest, isPassed);
            if (Array.isArray(autotest.workItemIds)) {
                this.client.autoTests.linkToWorkItems(autotest.externalId, autotest.workItemIds).catch((err) => {
                    console.log("Failed link work items. \n", err);
                });
            }
        });
    }
    loadTestRun(autotests) {
        return __awaiter(this, void 0, void 0, function* () {
            const testRunId = yield this.testRunId;
            return this.client.testRuns.loadAutotests(testRunId, autotests);
        });
    }
}
exports.BaseStrategy = BaseStrategy;
