"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const crypto_1 = require("crypto");
const path_1 = require("path");
const fs_1 = __importStar(require("fs"));
const os_1 = require("os");
var Utils;
(function (Utils) {
    function getHash(input) {
        return (0, crypto_1.createHash)("md5").update(input).digest("hex");
    }
    Utils.getHash = getHash;
    function getDir(file) {
        return (0, path_1.dirname)(file);
    }
    Utils.getDir = getDir;
    function removeDir(path) {
        (0, fs_1.rmSync)(path, { recursive: true });
    }
    Utils.removeDir = removeDir;
    function getFileName(file) {
        return (0, path_1.basename)(file);
    }
    Utils.getFileName = getFileName;
    function getExtName(path) {
        return (0, path_1.extname)(path);
    }
    Utils.getExtName = getExtName;
    function generateFileName(prefix) {
        return `${prefix || "file"}-${(0, crypto_1.randomUUID)()}.txt`;
    }
    Utils.generateFileName = generateFileName;
    function readFile(path) {
        let fileContents;
        try {
            fileContents = fs_1.default.readFileSync(path).toString();
        }
        catch (err) {
            fileContents = "";
        }
        return fileContents;
    }
    Utils.readFile = readFile;
    function writeFile(path, content) {
        (0, fs_1.writeFileSync)(path, content);
    }
    Utils.writeFile = writeFile;
    function createTempDir() {
        return (0, fs_1.mkdtempSync)((0, path_1.join)((0, os_1.tmpdir)(), "tms-"));
    }
    Utils.createTempDir = createTempDir;
    function readStream(path) {
        return fs_1.default.createReadStream(path);
    }
    Utils.readStream = readStream;
})(Utils || (exports.Utils = Utils = {}));
