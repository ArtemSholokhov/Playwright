"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigComposer = exports.DEFAULT_CONFIG_FILE = void 0;
const dotenv = __importStar(require("dotenv"));
const common_1 = require("../../common");
exports.DEFAULT_CONFIG_FILE = "tms.config.json";
class ConfigComposer {
    compose(base) {
        var _a, _b;
        const processEnvironment = parseProcessEnvConfig();
        const dotEnvironment = parseDotEnvConfig();
        const environment = this.mergeEnv(dotEnvironment, processEnvironment);
        const content = common_1.Utils.readFile((_b = (_a = dotEnvironment === null || dotEnvironment === void 0 ? void 0 : dotEnvironment.TMS_CONFIG_FILE) !== null && _a !== void 0 ? _a : processEnvironment.TMS_CONFIG_FILE) !== null && _b !== void 0 ? _b : exports.DEFAULT_CONFIG_FILE);
        let config;
        if (content !== "") {
            const fileConfig = JSON.parse(content);
            if (fileConfig.privateToken) {
                console.warn(`
        The configuration file specifies a private token. It is not safe. 
        Use TMS_PRIVATE_TOKEN environment variable`);
            }
            config = this.mergeAll(fileConfig, environment, base);
        }
        else {
            config = this.merge(environment, base);
        }
        this.validateConfig(config);
        return config;
    }
    mergeAll(file, env, base) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return {
            url: this.resolveAllProperties(file.url, env === null || env === void 0 ? void 0 : env.TMS_URL, base === null || base === void 0 ? void 0 : base.url),
            projectId: this.resolveAllProperties(file.projectId, env === null || env === void 0 ? void 0 : env.TMS_PROJECT_ID, base === null || base === void 0 ? void 0 : base.projectId),
            testRunId: this.resolveAllProperties(file.testRunId, env === null || env === void 0 ? void 0 : env.TMS_TEST_RUN_ID, base === null || base === void 0 ? void 0 : base.testRunId),
            testRunName: this.resolveAllProperties(file.testRunName, env === null || env === void 0 ? void 0 : env.TMS_TEST_RUN_NAME, base === null || base === void 0 ? void 0 : base.testRunName) == "" ? undefined : this.resolveAllProperties(file.testRunName, env === null || env === void 0 ? void 0 : env.TMS_TEST_RUN_NAME, base === null || base === void 0 ? void 0 : base.testRunName),
            privateToken: this.resolveAllProperties(file.privateToken, env === null || env === void 0 ? void 0 : env.TMS_PRIVATE_TOKEN, base === null || base === void 0 ? void 0 : base.privateToken),
            adapterMode: (_c = (_b = (_a = base === null || base === void 0 ? void 0 : base.adapterMode) !== null && _a !== void 0 ? _a : env === null || env === void 0 ? void 0 : env.TMS_ADAPTER_MODE) !== null && _b !== void 0 ? _b : file === null || file === void 0 ? void 0 : file.adapterMode) !== null && _c !== void 0 ? _c : 0,
            configurationId: this.resolveAllProperties(file.configurationId, env === null || env === void 0 ? void 0 : env.TMS_CONFIGURATION_ID, base === null || base === void 0 ? void 0 : base.configurationId),
            automaticCreationTestCases: (_f = (_e = (_d = file.automaticCreationTestCases) !== null && _d !== void 0 ? _d : env === null || env === void 0 ? void 0 : env.TMS_AUTOMATIC_CREATION_TEST_CASES) !== null && _e !== void 0 ? _e : base === null || base === void 0 ? void 0 : base.automaticCreationTestCases) !== null && _f !== void 0 ? _f : false,
            certValidation: (_j = (_h = (_g = file.certValidation) !== null && _g !== void 0 ? _g : env === null || env === void 0 ? void 0 : env.TMS_CERT_VALIDATION) !== null && _h !== void 0 ? _h : base === null || base === void 0 ? void 0 : base.certValidation) !== null && _j !== void 0 ? _j : true
        };
    }
    merge(env, base) {
        var _a, _b, _c, _d, _e, _f;
        return {
            url: this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_URL, base === null || base === void 0 ? void 0 : base.url),
            projectId: this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_PROJECT_ID, base === null || base === void 0 ? void 0 : base.projectId),
            testRunId: this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_TEST_RUN_ID, base === null || base === void 0 ? void 0 : base.testRunId),
            testRunName: this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_TEST_RUN_NAME, base === null || base === void 0 ? void 0 : base.testRunName) == "" ? undefined : this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_TEST_RUN_NAME, base === null || base === void 0 ? void 0 : base.testRunName),
            privateToken: this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_PRIVATE_TOKEN, base === null || base === void 0 ? void 0 : base.privateToken),
            adapterMode: (_b = (_a = base === null || base === void 0 ? void 0 : base.adapterMode) !== null && _a !== void 0 ? _a : env === null || env === void 0 ? void 0 : env.TMS_ADAPTER_MODE) !== null && _b !== void 0 ? _b : 0,
            configurationId: this.resolveProperties(env === null || env === void 0 ? void 0 : env.TMS_CONFIGURATION_ID, base === null || base === void 0 ? void 0 : base.configurationId),
            automaticCreationTestCases: (_d = (_c = env === null || env === void 0 ? void 0 : env.TMS_AUTOMATIC_CREATION_TEST_CASES) !== null && _c !== void 0 ? _c : base === null || base === void 0 ? void 0 : base.automaticCreationTestCases) !== null && _d !== void 0 ? _d : false,
            certValidation: (_f = (_e = env === null || env === void 0 ? void 0 : env.TMS_CERT_VALIDATION) !== null && _e !== void 0 ? _e : base === null || base === void 0 ? void 0 : base.certValidation) !== null && _f !== void 0 ? _f : true
        };
    }
    mergeEnv(dotEnv, processEnv) {
        var _a, _b, _c;
        return {
            TMS_URL: this.resolveProperties(dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_URL, processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_URL),
            TMS_PROJECT_ID: this.resolveProperties(dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_PROJECT_ID, processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_PROJECT_ID),
            TMS_TEST_RUN_ID: this.resolveProperties(dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_TEST_RUN_ID, processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_TEST_RUN_ID),
            TMS_TEST_RUN_NAME: this.resolveProperties(dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_TEST_RUN_NAME, processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_TEST_RUN_NAME),
            TMS_PRIVATE_TOKEN: this.resolveProperties(dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_PRIVATE_TOKEN, processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_PRIVATE_TOKEN),
            TMS_ADAPTER_MODE: (_a = dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_ADAPTER_MODE) !== null && _a !== void 0 ? _a : processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_ADAPTER_MODE,
            TMS_CONFIGURATION_ID: this.resolveProperties(dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_CONFIGURATION_ID, processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_CONFIGURATION_ID),
            TMS_AUTOMATIC_CREATION_TEST_CASES: (_b = dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_AUTOMATIC_CREATION_TEST_CASES) !== null && _b !== void 0 ? _b : processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_AUTOMATIC_CREATION_TEST_CASES,
            TMS_CERT_VALIDATION: (_c = dotEnv === null || dotEnv === void 0 ? void 0 : dotEnv.TMS_CERT_VALIDATION) !== null && _c !== void 0 ? _c : processEnv === null || processEnv === void 0 ? void 0 : processEnv.TMS_CERT_VALIDATION
        };
    }
    resolveAllProperties(file, env, base) {
        if (base && base.trim()) {
            return base;
        }
        else if (env && env.trim()) {
            return env;
        }
        else if (file && file.trim()) {
            return file;
        }
        else {
            return "";
        }
    }
    resolveProperties(env, base) {
        if (base && base.trim()) {
            return base;
        }
        else if (env && env.trim()) {
            return env;
        }
        else {
            return "";
        }
    }
    validateConfig(config) {
        try {
            new URL(config.url);
        }
        catch (err) {
            console.error(`Url is invalid`);
        }
        if (!config.privateToken) {
            console.error(`Private Token is invalid`);
        }
        if (config.projectId.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') === null) {
            console.error(`Project ID is invalid`);
        }
        if (config.configurationId.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') === null) {
            console.error(`Configuration ID is invalid`);
        }
        if (config.adapterMode == 2) {
            if (config.testRunId.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') !== null) {
                console.error(`Adapter works in mode 2. Config should not contains test run id.`);
            }
        }
        else if (config.adapterMode == 1) {
            if (config.testRunId.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') === null) {
                console.error(`Adapter works in mode 1. Config should contains valid test run id.`);
            }
        }
        else {
            if (config.testRunId.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') === null) {
                console.error(`Adapter works in mode 0. Config should contains valid test run id.`);
            }
        }
    }
}
exports.ConfigComposer = ConfigComposer;
function parseDotEnvConfig() {
    return dotenv.config({ path: ".env" }).parsed;
}
function parseProcessEnvConfig() {
    return {
        TMS_URL: process.env.TMS_URL,
        TMS_PRIVATE_TOKEN: process.env.TMS_PRIVATE_TOKEN,
        TMS_PROJECT_ID: process.env.TMS_PROJECT_ID,
        TMS_CONFIGURATION_ID: process.env.TMS_CONFIGURATION_ID,
        TMS_TEST_RUN_ID: process.env.TMS_TEST_RUN_ID,
        TMS_TEST_RUN_NAME: process.env.TMS_TEST_RUN_NAME,
        TMS_ADAPTER_MODE: process.env.TMS_ADAPTER_MODE ? stringToAdapterMode(process.env.TMS_ADAPTER_MODE) : undefined,
        TMS_CERT_VALIDATION: process.env.TMS_CERT_VALIDATION ? stringToBoolean(process.env.TMS_CERT_VALIDATION) : undefined,
        TMS_AUTOMATIC_CREATION_TEST_CASES: process.env.TMS_AUTOMATIC_CREATION_TEST_CASES ? stringToBoolean(process.env.TMS_AUTOMATIC_CREATION_TEST_CASES) : undefined,
        TMS_CONFIG_FILE: process.env.TMS_PRIVATE_TOKEN,
    };
}
function stringToAdapterMode(str) {
    switch (str) {
        case "2":
            return 2;
        case "1":
            return 1;
        case "0":
            return 0;
        default:
            return undefined;
    }
}
function stringToBoolean(str) {
    return ((str === null || str === void 0 ? void 0 : str.toLowerCase()) === "true");
}
