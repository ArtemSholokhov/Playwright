"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunConverter = void 0;
const testit_api_client_1 = require("testit-api-client");
const common_1 = require("../../common");
const autotests_1 = require("../autotests");
class TestRunConverter extends common_1.BaseConverter {
    constructor(config) {
        super(config);
        this.autotestConverter = new autotests_1.AutotestConverter(config);
    }
    toLocalState(state) {
        return testit_api_client_1.TestRunState[state];
    }
    toOriginState(state) {
        return testit_api_client_1.TestRunState[state];
    }
    toOriginAutotestResult(autotest) {
        var _a, _b, _c, _d;
        return Object.assign(Object.assign({}, autotest), { configurationId: this.config.configurationId, autoTestExternalId: autotest.autoTestExternalId, links: (_a = autotest.links) === null || _a === void 0 ? void 0 : _a.map((link) => this.toOriginLink(link)), outcome: this.toOriginOutcome(autotest.outcome), stepResults: (_b = autotest.stepResults) === null || _b === void 0 ? void 0 : _b.map((step) => this.toOriginStep(step)), setupResults: (_c = autotest.setupResults) === null || _c === void 0 ? void 0 : _c.map((step) => this.toOriginStep(step)), teardownResults: (_d = autotest.teardownResults) === null || _d === void 0 ? void 0 : _d.map((step) => this.toOriginStep(step)) });
    }
    toLocalAutotestResult(test) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        return {
            id: test.id,
            testRunId: test.testRunId,
            configurationId: test.configurationId,
            autoTestId: (_a = test.autoTestId) !== null && _a !== void 0 ? _a : undefined,
            comment: (_b = test.comment) !== null && _b !== void 0 ? _b : undefined,
            outcome: (_c = test.outcome) !== null && _c !== void 0 ? _c : undefined,
            links: (_d = test.links) === null || _d === void 0 ? void 0 : _d.map((link) => this.toLocalLink(link)),
            attachments: (_e = test.attachments) !== null && _e !== void 0 ? _e : undefined,
            parameters: (_f = test.parameters) !== null && _f !== void 0 ? _f : undefined,
            properties: (_g = test.properties) !== null && _g !== void 0 ? _g : undefined,
            completedOn: (_h = test.completedOn) !== null && _h !== void 0 ? _h : undefined,
            message: (_j = test.message) !== null && _j !== void 0 ? _j : undefined,
            traces: (_k = test.traces) !== null && _k !== void 0 ? _k : undefined,
            startedOn: (_l = test.startedOn) !== null && _l !== void 0 ? _l : undefined,
            autoTest: test.autoTest ? this.autotestConverter.toLocalAutotest(test.autoTest) : undefined,
        };
    }
    toLocalTestRun(testRun) {
        var _a, _b, _c, _d, _e;
        return {
            id: testRun.id,
            name: testRun.name,
            startedOn: (_a = testRun.startedOn) !== null && _a !== void 0 ? _a : undefined,
            completedOn: (_b = testRun.completedOn) !== null && _b !== void 0 ? _b : undefined,
            description: (_c = testRun.description) !== null && _c !== void 0 ? _c : undefined,
            launchSource: (_d = testRun.launchSource) !== null && _d !== void 0 ? _d : undefined,
            stateName: this.toLocalState(testRun.stateName),
            testResults: (_e = testRun.testResults) === null || _e === void 0 ? void 0 : _e.map((test) => this.toLocalAutotestResult(test)),
        };
    }
}
exports.TestRunConverter = TestRunConverter;
