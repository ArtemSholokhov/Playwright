"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunsService = void 0;
const testit_api_client_1 = require("testit-api-client");
const base_service_1 = require("../base.service");
const testruns_converter_1 = require("./testruns.converter");
const testruns_handler_1 = require("./testruns.handler");
const testRunsApiKey = testit_api_client_1.TestRunsApiApiKeys["Bearer or PrivateToken"];
class TestRunsService extends base_service_1.BaseService {
    constructor(config) {
        super(config);
        this.config = config;
        this._client = new testit_api_client_1.TestRunsApi(config.url);
        this._converter = new testruns_converter_1.TestRunConverter(config);
        this._client.setApiKey(testRunsApiKey, `PrivateToken ${config.privateToken}`);
    }
    createTestRun() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client
                .createEmpty({
                projectId: this.config.projectId,
                name: this.config.testRunName,
            })
                .then(({ body }) => body.id);
        });
    }
    startTestRun(testRunId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const testRun = yield this.getTestRun(testRunId);
                if (testRun.stateName !== "Completed" && testRun.stateName !== "InProgress") {
                    yield this._client.startTestRun(testRunId);
                }
            }
            catch (err) {
                testruns_handler_1.TestRunErrorHandler.handleErrorStartTestRun(err);
            }
        });
    }
    completeTestRun(testRunId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const testRun = yield this.getTestRun(testRunId);
                if (testRun.stateName === "InProgress") {
                    yield this._client.completeTestRun(testRunId);
                }
            }
            catch (err) {
                testruns_handler_1.TestRunErrorHandler.handleErrorCompletedTestRun(err);
            }
        });
    }
    loadAutotests(testRunId, autotests) {
        return __awaiter(this, void 0, void 0, function* () {
            const autotestResults = autotests.map((test) => this._converter.toOriginAutotestResult(test));
            for (const autotestResult of autotestResults) {
                yield this._client.setAutoTestResultsForTestRun(testRunId, [autotestResult]);
            }
        });
    }
    getAutotests(testRunId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const testRun = yield this.getTestRun(testRunId);
            return (_a = testRun.testResults) === null || _a === void 0 ? void 0 : _a.filter((autotest) => autotest.configurationId === this.config.configurationId);
        });
    }
    getTestRun(testRunId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client
                .getTestRunById(testRunId)
                .then(({ body }) => body)
                .then((run) => this._converter.toLocalTestRun(run));
        });
    }
}
exports.TestRunsService = TestRunsService;
